// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Email {
  id            String   @id @default(cuid())
  messageId     String   @unique // Gmail message ID
  threadId      String?  // Gmail thread ID
  historyId     String?  // Gmail history ID
  
  // Email metadata
  from          String
  fromName      String?
  to            String[]
  cc            String[]
  bcc           String[]
  subject       String
  snippet       String   @db.Text
  body          String?  @db.Text
  htmlBody      String?  @db.Text
  
  // Timestamps
  sentAt        DateTime
  receivedAt    DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Gmail labels and status
  labels        String[]
  isUnread      Boolean  @default(true)
  isImportant   Boolean  @default(false)
  isStarred     Boolean  @default(false)
  
  // Vector embeddings for semantic search
  embedding     Float[] // Vector embedding of email content
  embeddingId   String?  // Pinecone vector ID
  
  // User association
  userEmail     String   // Which user's email this belongs to
  
  // Indexes for performance
  @@index([userEmail])
  @@index([sentAt])
  @@index([isUnread])
  @@index([messageId])
  @@index([threadId])
  @@map("emails")
}

model Contact {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  firstName     String?
  lastName      String?
  
  // Contact metadata
  domain        String?
  company       String?
  title         String?
  
  // Interaction stats
  emailCount    Int      @default(0)
  lastEmailAt   DateTime?
  
  // Vector embedding for semantic search
  embedding     Float[]
  embeddingId   String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // User association
  userEmail     String
  
  @@index([userEmail])
  @@index([email])
  @@index([name])
  @@map("contacts")
}

model EmailQuery {
  id            String   @id @default(cuid())
  query         String   @db.Text
  response      String   @db.Text
  
  // Query metadata
  userEmail     String
  matchedEmails String[] // Email IDs that matched the query
  queryType     String?  // 'semantic', 'keyword', 'filter', etc.
  
  createdAt     DateTime @default(now())
  
  @@index([userEmail])
  @@index([createdAt])
  @@map("email_queries")
}
